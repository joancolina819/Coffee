/*
 * generated by Xtext 2.17.1
 */
package com.coffee.serializer;

import com.coffee.hlvl.And;
import com.coffee.hlvl.Assign;
import com.coffee.hlvl.AttributeRef;
import com.coffee.hlvl.BoolConstant;
import com.coffee.hlvl.BoolVal;
import com.coffee.hlvl.Common;
import com.coffee.hlvl.Comparison;
import com.coffee.hlvl.ComplexImplies;
import com.coffee.hlvl.ComplexMutex;
import com.coffee.hlvl.ConstantDecl;
import com.coffee.hlvl.Decomposition;
import com.coffee.hlvl.ElmDeclaration;
import com.coffee.hlvl.Enumeration;
import com.coffee.hlvl.Equality;
import com.coffee.hlvl.Expression;
import com.coffee.hlvl.Function;
import com.coffee.hlvl.Group;
import com.coffee.hlvl.HlvlPackage;
import com.coffee.hlvl.Iff;
import com.coffee.hlvl.Implies;
import com.coffee.hlvl.IntConstant;
import com.coffee.hlvl.Interval;
import com.coffee.hlvl.ListOfIDs;
import com.coffee.hlvl.ListOfListValues;
import com.coffee.hlvl.ListOfRelRefs;
import com.coffee.hlvl.ListOfValuation;
import com.coffee.hlvl.ListOfValues;
import com.coffee.hlvl.Minus;
import com.coffee.hlvl.Model;
import com.coffee.hlvl.MulOrDiv;
import com.coffee.hlvl.Names;
import com.coffee.hlvl.Negation;
import com.coffee.hlvl.Operations;
import com.coffee.hlvl.Or;
import com.coffee.hlvl.Order;
import com.coffee.hlvl.Pair;
import com.coffee.hlvl.Plus;
import com.coffee.hlvl.Range;
import com.coffee.hlvl.RelDeclaration;
import com.coffee.hlvl.SingleInstruction;
import com.coffee.hlvl.Symbol;
import com.coffee.hlvl.SymbolConstant;
import com.coffee.hlvl.Unary;
import com.coffee.hlvl.ValidConf;
import com.coffee.hlvl.Valuation;
import com.coffee.hlvl.VarList;
import com.coffee.hlvl.VariableDecl;
import com.coffee.hlvl.VariableRef;
import com.coffee.hlvl.Visibility;
import com.coffee.services.HlvlGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HlvlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HlvlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HlvlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HlvlPackage.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case HlvlPackage.ASSIGN:
				sequence_Atomic(context, (Assign) semanticObject); 
				return; 
			case HlvlPackage.ATTRIBUTE_REF:
				sequence_Atomic(context, (AttributeRef) semanticObject); 
				return; 
			case HlvlPackage.BOOL_CONSTANT:
				sequence_Atomic(context, (BoolConstant) semanticObject); 
				return; 
			case HlvlPackage.BOOL_VAL:
				sequence_BoolVal(context, (BoolVal) semanticObject); 
				return; 
			case HlvlPackage.COMMON:
				sequence_Common(context, (Common) semanticObject); 
				return; 
			case HlvlPackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case HlvlPackage.COMPLEX_IMPLIES:
				sequence_ComplexImplies(context, (ComplexImplies) semanticObject); 
				return; 
			case HlvlPackage.COMPLEX_MUTEX:
				sequence_ComplexMutex(context, (ComplexMutex) semanticObject); 
				return; 
			case HlvlPackage.CONSTANT_DECL:
				sequence_ConstantDecl(context, (ConstantDecl) semanticObject); 
				return; 
			case HlvlPackage.DECOMPOSITION:
				sequence_Decomposition(context, (Decomposition) semanticObject); 
				return; 
			case HlvlPackage.ELM_DECLARATION:
				sequence_ElmDeclaration(context, (ElmDeclaration) semanticObject); 
				return; 
			case HlvlPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case HlvlPackage.EQUALITY:
				sequence_Equality(context, (Equality) semanticObject); 
				return; 
			case HlvlPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case HlvlPackage.FUNCTION:
				sequence_Primary(context, (Function) semanticObject); 
				return; 
			case HlvlPackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case HlvlPackage.IFF:
				sequence_Iff(context, (Iff) semanticObject); 
				return; 
			case HlvlPackage.IMPLIES:
				sequence_Implies(context, (Implies) semanticObject); 
				return; 
			case HlvlPackage.INT_CONSTANT:
				sequence_Atomic(context, (IntConstant) semanticObject); 
				return; 
			case HlvlPackage.INTERVAL:
				sequence_Interval(context, (Interval) semanticObject); 
				return; 
			case HlvlPackage.LIST_OF_IDS:
				sequence_ListOfIDs(context, (ListOfIDs) semanticObject); 
				return; 
			case HlvlPackage.LIST_OF_LIST_VALUES:
				sequence_ListOfListValues(context, (ListOfListValues) semanticObject); 
				return; 
			case HlvlPackage.LIST_OF_REL_REFS:
				sequence_ListOfRelRefs(context, (ListOfRelRefs) semanticObject); 
				return; 
			case HlvlPackage.LIST_OF_VALUATION:
				sequence_ListOfValuation(context, (ListOfValuation) semanticObject); 
				return; 
			case HlvlPackage.LIST_OF_VALUES:
				sequence_ListOfValues(context, (ListOfValues) semanticObject); 
				return; 
			case HlvlPackage.MINUS:
				sequence_PlusOrMinus(context, (Minus) semanticObject); 
				return; 
			case HlvlPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case HlvlPackage.MUL_OR_DIV:
				sequence_MulOrDiv(context, (MulOrDiv) semanticObject); 
				return; 
			case HlvlPackage.NAMES:
				sequence_Names(context, (Names) semanticObject); 
				return; 
			case HlvlPackage.NEGATION:
				sequence_Primary(context, (Negation) semanticObject); 
				return; 
			case HlvlPackage.NUMBER:
				sequence_Number(context, (com.coffee.hlvl.Number) semanticObject); 
				return; 
			case HlvlPackage.OPERATIONS:
				sequence_Operations(context, (Operations) semanticObject); 
				return; 
			case HlvlPackage.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			case HlvlPackage.ORDER:
				sequence_Order(context, (Order) semanticObject); 
				return; 
			case HlvlPackage.PAIR:
				sequence_Pair(context, (Pair) semanticObject); 
				return; 
			case HlvlPackage.PLUS:
				sequence_PlusOrMinus(context, (Plus) semanticObject); 
				return; 
			case HlvlPackage.RANGE:
				sequence_Range(context, (Range) semanticObject); 
				return; 
			case HlvlPackage.REL_DECLARATION:
				sequence_RelDeclaration(context, (RelDeclaration) semanticObject); 
				return; 
			case HlvlPackage.SINGLE_INSTRUCTION:
				sequence_Sample(context, (SingleInstruction) semanticObject); 
				return; 
			case HlvlPackage.SYMBOL:
				sequence_Symbol(context, (Symbol) semanticObject); 
				return; 
			case HlvlPackage.SYMBOL_CONSTANT:
				sequence_Atomic(context, (SymbolConstant) semanticObject); 
				return; 
			case HlvlPackage.UNARY:
				sequence_Primary(context, (Unary) semanticObject); 
				return; 
			case HlvlPackage.VALID_CONF:
				sequence_Sample(context, (ValidConf) semanticObject); 
				return; 
			case HlvlPackage.VALUATION:
				sequence_Valuation(context, (Valuation) semanticObject); 
				return; 
			case HlvlPackage.VAR_LIST:
				sequence_VarList(context, (VarList) semanticObject); 
				return; 
			case HlvlPackage.VARIABLE_DECL:
				sequence_VariableDecl(context, (VariableDecl) semanticObject); 
				return; 
			case HlvlPackage.VARIABLE_REF:
				sequence_Atomic(context, (VariableRef) semanticObject); 
				return; 
			case HlvlPackage.VISIBILITY:
				sequence_Visibility(context, (Visibility) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Relational returns And
	 *     Iff returns And
	 *     Iff.Iff_1_0 returns And
	 *     Implies returns And
	 *     Implies.Implies_1_0 returns And
	 *     Or returns And
	 *     Or.Or_1_0 returns And
	 *     And returns And
	 *     And.And_1_0 returns And
	 *     Equality returns And
	 *     Equality.Equality_1_0 returns And
	 *     Comparison returns And
	 *     Comparison.Comparison_1_0 returns And
	 *     PlusOrMinus returns And
	 *     PlusOrMinus.Plus_1_0_0_0 returns And
	 *     PlusOrMinus.Minus_1_0_1_0 returns And
	 *     MulOrDiv returns And
	 *     MulOrDiv.MulOrDiv_1_0 returns And
	 *     Primary returns And
	 *
	 * Constraint:
	 *     (left=And_And_1_0 right=Equality)
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndAccess().getAndLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Assign
	 *     Iff returns Assign
	 *     Iff.Iff_1_0 returns Assign
	 *     Implies returns Assign
	 *     Implies.Implies_1_0 returns Assign
	 *     Or returns Assign
	 *     Or.Or_1_0 returns Assign
	 *     And returns Assign
	 *     And.And_1_0 returns Assign
	 *     Equality returns Assign
	 *     Equality.Equality_1_0 returns Assign
	 *     Comparison returns Assign
	 *     Comparison.Comparison_1_0 returns Assign
	 *     PlusOrMinus returns Assign
	 *     PlusOrMinus.Plus_1_0_0_0 returns Assign
	 *     PlusOrMinus.Minus_1_0_1_0 returns Assign
	 *     MulOrDiv returns Assign
	 *     MulOrDiv.MulOrDiv_1_0 returns Assign
	 *     Primary returns Assign
	 *     Atomic returns Assign
	 *
	 * Constraint:
	 *     (variable=[ElmDeclaration|ID] value=Value)
	 */
	protected void sequence_Atomic(ISerializationContext context, Assign semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.ASSIGN__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.ASSIGN__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.ASSIGN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.ASSIGN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getVariableElmDeclarationIDTerminalRuleCall_3_1_0_1(), semanticObject.eGet(HlvlPackage.Literals.ASSIGN__VARIABLE, false));
		feeder.accept(grammarAccess.getAtomicAccess().getValueValueParserRuleCall_3_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns AttributeRef
	 *     Iff returns AttributeRef
	 *     Iff.Iff_1_0 returns AttributeRef
	 *     Implies returns AttributeRef
	 *     Implies.Implies_1_0 returns AttributeRef
	 *     Or returns AttributeRef
	 *     Or.Or_1_0 returns AttributeRef
	 *     And returns AttributeRef
	 *     And.And_1_0 returns AttributeRef
	 *     Equality returns AttributeRef
	 *     Equality.Equality_1_0 returns AttributeRef
	 *     Comparison returns AttributeRef
	 *     Comparison.Comparison_1_0 returns AttributeRef
	 *     PlusOrMinus returns AttributeRef
	 *     PlusOrMinus.Plus_1_0_0_0 returns AttributeRef
	 *     PlusOrMinus.Minus_1_0_1_0 returns AttributeRef
	 *     MulOrDiv returns AttributeRef
	 *     MulOrDiv.MulOrDiv_1_0 returns AttributeRef
	 *     Primary returns AttributeRef
	 *     Atomic returns AttributeRef
	 *
	 * Constraint:
	 *     attribute=QualifiedName
	 */
	protected void sequence_Atomic(ISerializationContext context, AttributeRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.ATTRIBUTE_REF__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.ATTRIBUTE_REF__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getAttributeQualifiedNameParserRuleCall_2_1_0(), semanticObject.getAttribute());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns BoolConstant
	 *     Iff returns BoolConstant
	 *     Iff.Iff_1_0 returns BoolConstant
	 *     Implies returns BoolConstant
	 *     Implies.Implies_1_0 returns BoolConstant
	 *     Or returns BoolConstant
	 *     Or.Or_1_0 returns BoolConstant
	 *     And returns BoolConstant
	 *     And.And_1_0 returns BoolConstant
	 *     Equality returns BoolConstant
	 *     Equality.Equality_1_0 returns BoolConstant
	 *     Comparison returns BoolConstant
	 *     Comparison.Comparison_1_0 returns BoolConstant
	 *     PlusOrMinus returns BoolConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns BoolConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns BoolConstant
	 *     MulOrDiv returns BoolConstant
	 *     MulOrDiv.MulOrDiv_1_0 returns BoolConstant
	 *     Primary returns BoolConstant
	 *     Atomic returns BoolConstant
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_Atomic(ISerializationContext context, BoolConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns IntConstant
	 *     Iff returns IntConstant
	 *     Iff.Iff_1_0 returns IntConstant
	 *     Implies returns IntConstant
	 *     Implies.Implies_1_0 returns IntConstant
	 *     Or returns IntConstant
	 *     Or.Or_1_0 returns IntConstant
	 *     And returns IntConstant
	 *     And.And_1_0 returns IntConstant
	 *     Equality returns IntConstant
	 *     Equality.Equality_1_0 returns IntConstant
	 *     Comparison returns IntConstant
	 *     Comparison.Comparison_1_0 returns IntConstant
	 *     PlusOrMinus returns IntConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns IntConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns IntConstant
	 *     MulOrDiv returns IntConstant
	 *     MulOrDiv.MulOrDiv_1_0 returns IntConstant
	 *     Primary returns IntConstant
	 *     Atomic returns IntConstant
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Atomic(ISerializationContext context, IntConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.INT_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.INT_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_5_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns SymbolConstant
	 *     Iff returns SymbolConstant
	 *     Iff.Iff_1_0 returns SymbolConstant
	 *     Implies returns SymbolConstant
	 *     Implies.Implies_1_0 returns SymbolConstant
	 *     Or returns SymbolConstant
	 *     Or.Or_1_0 returns SymbolConstant
	 *     And returns SymbolConstant
	 *     And.And_1_0 returns SymbolConstant
	 *     Equality returns SymbolConstant
	 *     Equality.Equality_1_0 returns SymbolConstant
	 *     Comparison returns SymbolConstant
	 *     Comparison.Comparison_1_0 returns SymbolConstant
	 *     PlusOrMinus returns SymbolConstant
	 *     PlusOrMinus.Plus_1_0_0_0 returns SymbolConstant
	 *     PlusOrMinus.Minus_1_0_1_0 returns SymbolConstant
	 *     MulOrDiv returns SymbolConstant
	 *     MulOrDiv.MulOrDiv_1_0 returns SymbolConstant
	 *     Primary returns SymbolConstant
	 *     Atomic returns SymbolConstant
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Atomic(ISerializationContext context, SymbolConstant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.SYMBOL_CONSTANT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.SYMBOL_CONSTANT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_4_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns VariableRef
	 *     Iff returns VariableRef
	 *     Iff.Iff_1_0 returns VariableRef
	 *     Implies returns VariableRef
	 *     Implies.Implies_1_0 returns VariableRef
	 *     Or returns VariableRef
	 *     Or.Or_1_0 returns VariableRef
	 *     And returns VariableRef
	 *     And.And_1_0 returns VariableRef
	 *     Equality returns VariableRef
	 *     Equality.Equality_1_0 returns VariableRef
	 *     Comparison returns VariableRef
	 *     Comparison.Comparison_1_0 returns VariableRef
	 *     PlusOrMinus returns VariableRef
	 *     PlusOrMinus.Plus_1_0_0_0 returns VariableRef
	 *     PlusOrMinus.Minus_1_0_1_0 returns VariableRef
	 *     MulOrDiv returns VariableRef
	 *     MulOrDiv.MulOrDiv_1_0 returns VariableRef
	 *     Primary returns VariableRef
	 *     Atomic returns VariableRef
	 *
	 * Constraint:
	 *     variable=[ElmDeclaration|ID]
	 */
	protected void sequence_Atomic(ISerializationContext context, VariableRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.VARIABLE_REF__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.VARIABLE_REF__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getVariableElmDeclarationIDTerminalRuleCall_1_1_0_1(), semanticObject.eGet(HlvlPackage.Literals.VARIABLE_REF__VARIABLE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BoolVal returns BoolVal
	 *     Value returns BoolVal
	 *
	 * Constraint:
	 *     (value='true' | value='false')
	 */
	protected void sequence_BoolVal(ISerializationContext context, BoolVal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Common
	 *     Common returns Common
	 *
	 * Constraint:
	 *     elements=ListOfIDs
	 */
	protected void sequence_Common(ISerializationContext context, Common semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.COMMON__ELEMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.COMMON__ELEMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommonAccess().getElementsListOfIDsParserRuleCall_3_0(), semanticObject.getElements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Comparison
	 *     Iff returns Comparison
	 *     Iff.Iff_1_0 returns Comparison
	 *     Implies returns Comparison
	 *     Implies.Implies_1_0 returns Comparison
	 *     Or returns Comparison
	 *     Or.Or_1_0 returns Comparison
	 *     And returns Comparison
	 *     And.And_1_0 returns Comparison
	 *     Equality returns Comparison
	 *     Equality.Equality_1_0 returns Comparison
	 *     Comparison returns Comparison
	 *     Comparison.Comparison_1_0 returns Comparison
	 *     PlusOrMinus returns Comparison
	 *     PlusOrMinus.Plus_1_0_0_0 returns Comparison
	 *     PlusOrMinus.Minus_1_0_1_0 returns Comparison
	 *     MulOrDiv returns Comparison
	 *     MulOrDiv.MulOrDiv_1_0 returns Comparison
	 *     Primary returns Comparison
	 *
	 * Constraint:
	 *     (left=Comparison_Comparison_1_0 (op='>=' | op='<=' | op='>' | op='<') right=PlusOrMinus)
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns ComplexImplies
	 *     ComplexImplies returns ComplexImplies
	 *
	 * Constraint:
	 *     (exp=Relational elements=ListOfIDs)
	 */
	protected void sequence_ComplexImplies(ISerializationContext context, ComplexImplies semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.COMPLEX_IMPLIES__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.COMPLEX_IMPLIES__EXP));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.COMPLEX_IMPLIES__ELEMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.COMPLEX_IMPLIES__ELEMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComplexImpliesAccess().getExpRelationalParserRuleCall_3_0(), semanticObject.getExp());
		feeder.accept(grammarAccess.getComplexImpliesAccess().getElementsListOfIDsParserRuleCall_7_0(), semanticObject.getElements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns ComplexMutex
	 *     ComplexMutex returns ComplexMutex
	 *
	 * Constraint:
	 *     (exp=Relational elements=ListOfIDs)
	 */
	protected void sequence_ComplexMutex(ISerializationContext context, ComplexMutex semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.COMPLEX_MUTEX__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.COMPLEX_MUTEX__EXP));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.COMPLEX_MUTEX__ELEMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.COMPLEX_MUTEX__ELEMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComplexMutexAccess().getExpRelationalParserRuleCall_3_0(), semanticObject.getExp());
		feeder.accept(grammarAccess.getComplexMutexAccess().getElementsListOfIDsParserRuleCall_7_0(), semanticObject.getElements());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns ConstantDecl
	 *     ConstantDecl returns ConstantDecl
	 *
	 * Constraint:
	 *     value=Value?
	 */
	protected void sequence_ConstantDecl(ISerializationContext context, ConstantDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Decomposition
	 *     Hierarchy returns Decomposition
	 *     Decomposition returns Decomposition
	 *
	 * Constraint:
	 *     (parent=[ElmDeclaration|ID] children=ListOfIDs min=INT max=INT)
	 */
	protected void sequence_Decomposition(ISerializationContext context, Decomposition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.HIERARCHY__PARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.HIERARCHY__PARENT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.HIERARCHY__CHILDREN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.HIERARCHY__CHILDREN));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.HIERARCHY__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.HIERARCHY__MIN));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.DECOMPOSITION__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.DECOMPOSITION__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDecompositionAccess().getParentElmDeclarationIDTerminalRuleCall_3_0_1(), semanticObject.eGet(HlvlPackage.Literals.HIERARCHY__PARENT, false));
		feeder.accept(grammarAccess.getDecompositionAccess().getChildrenListOfIDsParserRuleCall_6_0(), semanticObject.getChildren());
		feeder.accept(grammarAccess.getDecompositionAccess().getMinINTTerminalRuleCall_10_0(), semanticObject.getMin());
		feeder.accept(grammarAccess.getDecompositionAccess().getMaxINTTerminalRuleCall_12_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElmDeclaration returns ElmDeclaration
	 *
	 * Constraint:
	 *     (att='att'? dataType=DataType name=ID declaration=Declaration comment=STRING?)
	 */
	protected void sequence_ElmDeclaration(ISerializationContext context, ElmDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OptionsDeclaration returns Enumeration
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     list=ListOfValues
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.ENUMERATION__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.ENUMERATION__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumerationAccess().getListListOfValuesParserRuleCall_1_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Equality
	 *     Iff returns Equality
	 *     Iff.Iff_1_0 returns Equality
	 *     Implies returns Equality
	 *     Implies.Implies_1_0 returns Equality
	 *     Or returns Equality
	 *     Or.Or_1_0 returns Equality
	 *     And returns Equality
	 *     And.And_1_0 returns Equality
	 *     Equality returns Equality
	 *     Equality.Equality_1_0 returns Equality
	 *     Comparison returns Equality
	 *     Comparison.Comparison_1_0 returns Equality
	 *     PlusOrMinus returns Equality
	 *     PlusOrMinus.Plus_1_0_0_0 returns Equality
	 *     PlusOrMinus.Minus_1_0_1_0 returns Equality
	 *     MulOrDiv returns Equality
	 *     MulOrDiv.MulOrDiv_1_0 returns Equality
	 *     Primary returns Equality
	 *
	 * Constraint:
	 *     (left=Equality_Equality_1_0 (op='=' | op='!=') right=Comparison)
	 */
	protected void sequence_Equality(ISerializationContext context, Equality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Expression
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     exp=Relational
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.EXPRESSION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.EXPRESSION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getExpRelationalParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Group
	 *     Hierarchy returns Group
	 *     Group returns Group
	 *
	 * Constraint:
	 *     (parent=[ElmDeclaration|ID] children=ListOfIDs min=INT max=Range)
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.HIERARCHY__PARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.HIERARCHY__PARENT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.HIERARCHY__CHILDREN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.HIERARCHY__CHILDREN));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.HIERARCHY__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.HIERARCHY__MIN));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.GROUP__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.GROUP__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGroupAccess().getParentElmDeclarationIDTerminalRuleCall_3_0_1(), semanticObject.eGet(HlvlPackage.Literals.HIERARCHY__PARENT, false));
		feeder.accept(grammarAccess.getGroupAccess().getChildrenListOfIDsParserRuleCall_6_0(), semanticObject.getChildren());
		feeder.accept(grammarAccess.getGroupAccess().getMinINTTerminalRuleCall_10_0(), semanticObject.getMin());
		feeder.accept(grammarAccess.getGroupAccess().getMaxRangeParserRuleCall_12_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Iff
	 *     Iff returns Iff
	 *     Iff.Iff_1_0 returns Iff
	 *     Implies returns Iff
	 *     Implies.Implies_1_0 returns Iff
	 *     Or returns Iff
	 *     Or.Or_1_0 returns Iff
	 *     And returns Iff
	 *     And.And_1_0 returns Iff
	 *     Equality returns Iff
	 *     Equality.Equality_1_0 returns Iff
	 *     Comparison returns Iff
	 *     Comparison.Comparison_1_0 returns Iff
	 *     PlusOrMinus returns Iff
	 *     PlusOrMinus.Plus_1_0_0_0 returns Iff
	 *     PlusOrMinus.Minus_1_0_1_0 returns Iff
	 *     MulOrDiv returns Iff
	 *     MulOrDiv.MulOrDiv_1_0 returns Iff
	 *     Primary returns Iff
	 *
	 * Constraint:
	 *     (left=Iff_Iff_1_0 right=Implies)
	 */
	protected void sequence_Iff(ISerializationContext context, Iff semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.IFF__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.IFF__LEFT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.IFF__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.IFF__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIffAccess().getIffLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getIffAccess().getRightImpliesParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Implies
	 *     Iff returns Implies
	 *     Iff.Iff_1_0 returns Implies
	 *     Implies returns Implies
	 *     Implies.Implies_1_0 returns Implies
	 *     Or returns Implies
	 *     Or.Or_1_0 returns Implies
	 *     And returns Implies
	 *     And.And_1_0 returns Implies
	 *     Equality returns Implies
	 *     Equality.Equality_1_0 returns Implies
	 *     Comparison returns Implies
	 *     Comparison.Comparison_1_0 returns Implies
	 *     PlusOrMinus returns Implies
	 *     PlusOrMinus.Plus_1_0_0_0 returns Implies
	 *     PlusOrMinus.Minus_1_0_1_0 returns Implies
	 *     MulOrDiv returns Implies
	 *     MulOrDiv.MulOrDiv_1_0 returns Implies
	 *     Primary returns Implies
	 *
	 * Constraint:
	 *     (left=Implies_Implies_1_0 right=Or)
	 */
	protected void sequence_Implies(ISerializationContext context, Implies semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.IMPLIES__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.IMPLIES__LEFT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.IMPLIES__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.IMPLIES__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImpliesAccess().getImpliesLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getImpliesAccess().getRightOrParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OptionsDeclaration returns Interval
	 *     Interval returns Interval
	 *
	 * Constraint:
	 *     (start=INT end=INT)
	 */
	protected void sequence_Interval(ISerializationContext context, Interval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.INTERVAL__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.INTERVAL__START));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.INTERVAL__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.INTERVAL__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntervalAccess().getStartINTTerminalRuleCall_0_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getIntervalAccess().getEndINTTerminalRuleCall_2_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ListOfIDs returns ListOfIDs
	 *
	 * Constraint:
	 *     (values+=[ElmDeclaration|ID] values+=[ElmDeclaration|ID]*)
	 */
	protected void sequence_ListOfIDs(ISerializationContext context, ListOfIDs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListOfListValues returns ListOfListValues
	 *
	 * Constraint:
	 *     (list+=ListOfValues list+=ListOfValues*)
	 */
	protected void sequence_ListOfListValues(ISerializationContext context, ListOfListValues semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListOfRelRefs returns ListOfRelRefs
	 *
	 * Constraint:
	 *     (ids+=[RelDeclaration|ID] ids+=[RelDeclaration|ID]*)
	 */
	protected void sequence_ListOfRelRefs(ISerializationContext context, ListOfRelRefs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListOfValuation returns ListOfValuation
	 *
	 * Constraint:
	 *     (pairs+=Valuation pairs+=Valuation*)
	 */
	protected void sequence_ListOfValuation(ISerializationContext context, ListOfValuation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListOfValues returns ListOfValues
	 *
	 * Constraint:
	 *     (values+=Value values+=Value*)
	 */
	protected void sequence_ListOfValues(ISerializationContext context, ListOfValues semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=ID elements+=ElmDeclaration* relations+=RelDeclaration* operations=Operations?)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns MulOrDiv
	 *     Iff returns MulOrDiv
	 *     Iff.Iff_1_0 returns MulOrDiv
	 *     Implies returns MulOrDiv
	 *     Implies.Implies_1_0 returns MulOrDiv
	 *     Or returns MulOrDiv
	 *     Or.Or_1_0 returns MulOrDiv
	 *     And returns MulOrDiv
	 *     And.And_1_0 returns MulOrDiv
	 *     Equality returns MulOrDiv
	 *     Equality.Equality_1_0 returns MulOrDiv
	 *     Comparison returns MulOrDiv
	 *     Comparison.Comparison_1_0 returns MulOrDiv
	 *     PlusOrMinus returns MulOrDiv
	 *     PlusOrMinus.Plus_1_0_0_0 returns MulOrDiv
	 *     PlusOrMinus.Minus_1_0_1_0 returns MulOrDiv
	 *     MulOrDiv returns MulOrDiv
	 *     MulOrDiv.MulOrDiv_1_0 returns MulOrDiv
	 *     Primary returns MulOrDiv
	 *
	 * Constraint:
	 *     (left=MulOrDiv_MulOrDiv_1_0 (op='*' | op='/' | op='mod') right=Primary)
	 */
	protected void sequence_MulOrDiv(ISerializationContext context, MulOrDiv semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Names returns Names
	 *
	 * Constraint:
	 *     (ids+=ID ids+=ID*)
	 */
	protected void sequence_Names(ISerializationContext context, Names semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number returns Number
	 *     Value returns Number
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Number(ISerializationContext context, com.coffee.hlvl.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operations returns Operations
	 *
	 * Constraint:
	 *     (op+=Operation op+=Operation*)
	 */
	protected void sequence_Operations(ISerializationContext context, Operations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Or
	 *     Iff returns Or
	 *     Iff.Iff_1_0 returns Or
	 *     Implies returns Or
	 *     Implies.Implies_1_0 returns Or
	 *     Or returns Or
	 *     Or.Or_1_0 returns Or
	 *     And returns Or
	 *     And.And_1_0 returns Or
	 *     Equality returns Or
	 *     Equality.Equality_1_0 returns Or
	 *     Comparison returns Or
	 *     Comparison.Comparison_1_0 returns Or
	 *     PlusOrMinus returns Or
	 *     PlusOrMinus.Plus_1_0_0_0 returns Or
	 *     PlusOrMinus.Minus_1_0_1_0 returns Or
	 *     MulOrDiv returns Or
	 *     MulOrDiv.MulOrDiv_1_0 returns Or
	 *     Primary returns Or
	 *
	 * Constraint:
	 *     (left=Or_Or_1_0 right=And)
	 */
	protected void sequence_Or(ISerializationContext context, Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrAccess().getOrLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Order
	 *     Order returns Order
	 *
	 * Constraint:
	 *     (operator='before' | (left=[ElmDeclaration|ID] right+=ListOfIDs))
	 */
	protected void sequence_Order(ISerializationContext context, Order semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Pair
	 *     Pair returns Pair
	 *
	 * Constraint:
	 *     ((operator='implies' | operator='mutex') var1=[ElmDeclaration|ID] var2=[ElmDeclaration|ID])
	 */
	protected void sequence_Pair(ISerializationContext context, Pair semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Minus
	 *     Iff returns Minus
	 *     Iff.Iff_1_0 returns Minus
	 *     Implies returns Minus
	 *     Implies.Implies_1_0 returns Minus
	 *     Or returns Minus
	 *     Or.Or_1_0 returns Minus
	 *     And returns Minus
	 *     And.And_1_0 returns Minus
	 *     Equality returns Minus
	 *     Equality.Equality_1_0 returns Minus
	 *     Comparison returns Minus
	 *     Comparison.Comparison_1_0 returns Minus
	 *     PlusOrMinus returns Minus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Minus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Minus
	 *     MulOrDiv returns Minus
	 *     MulOrDiv.MulOrDiv_1_0 returns Minus
	 *     Primary returns Minus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Minus_1_0_1_0 right=MulOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Plus
	 *     Iff returns Plus
	 *     Iff.Iff_1_0 returns Plus
	 *     Implies returns Plus
	 *     Implies.Implies_1_0 returns Plus
	 *     Or returns Plus
	 *     Or.Or_1_0 returns Plus
	 *     And returns Plus
	 *     And.And_1_0 returns Plus
	 *     Equality returns Plus
	 *     Equality.Equality_1_0 returns Plus
	 *     Comparison returns Plus
	 *     Comparison.Comparison_1_0 returns Plus
	 *     PlusOrMinus returns Plus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Plus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Plus
	 *     MulOrDiv returns Plus
	 *     MulOrDiv.MulOrDiv_1_0 returns Plus
	 *     Primary returns Plus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Plus_1_0_0_0 right=MulOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Function
	 *     Iff returns Function
	 *     Iff.Iff_1_0 returns Function
	 *     Implies returns Function
	 *     Implies.Implies_1_0 returns Function
	 *     Or returns Function
	 *     Or.Or_1_0 returns Function
	 *     And returns Function
	 *     And.And_1_0 returns Function
	 *     Equality returns Function
	 *     Equality.Equality_1_0 returns Function
	 *     Comparison returns Function
	 *     Comparison.Comparison_1_0 returns Function
	 *     PlusOrMinus returns Function
	 *     PlusOrMinus.Plus_1_0_0_0 returns Function
	 *     PlusOrMinus.Minus_1_0_1_0 returns Function
	 *     MulOrDiv returns Function
	 *     MulOrDiv.MulOrDiv_1_0 returns Function
	 *     Primary returns Function
	 *
	 * Constraint:
	 *     (op=FunctionOp left=Primary right=Primary)
	 */
	protected void sequence_Primary(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.FUNCTION__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.FUNCTION__OP));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.FUNCTION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.FUNCTION__LEFT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.FUNCTION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.FUNCTION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getOpFunctionOpParserRuleCall_3_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getPrimaryAccess().getLeftPrimaryParserRuleCall_3_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPrimaryAccess().getRightPrimaryParserRuleCall_3_5_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Negation
	 *     Iff returns Negation
	 *     Iff.Iff_1_0 returns Negation
	 *     Implies returns Negation
	 *     Implies.Implies_1_0 returns Negation
	 *     Or returns Negation
	 *     Or.Or_1_0 returns Negation
	 *     And returns Negation
	 *     And.And_1_0 returns Negation
	 *     Equality returns Negation
	 *     Equality.Equality_1_0 returns Negation
	 *     Comparison returns Negation
	 *     Comparison.Comparison_1_0 returns Negation
	 *     PlusOrMinus returns Negation
	 *     PlusOrMinus.Plus_1_0_0_0 returns Negation
	 *     PlusOrMinus.Minus_1_0_1_0 returns Negation
	 *     MulOrDiv returns Negation
	 *     MulOrDiv.MulOrDiv_1_0 returns Negation
	 *     Primary returns Negation
	 *
	 * Constraint:
	 *     expression=Primary
	 */
	protected void sequence_Primary(ISerializationContext context, Negation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.NEGATION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.NEGATION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relational returns Unary
	 *     Iff returns Unary
	 *     Iff.Iff_1_0 returns Unary
	 *     Implies returns Unary
	 *     Implies.Implies_1_0 returns Unary
	 *     Or returns Unary
	 *     Or.Or_1_0 returns Unary
	 *     And returns Unary
	 *     And.And_1_0 returns Unary
	 *     Equality returns Unary
	 *     Equality.Equality_1_0 returns Unary
	 *     Comparison returns Unary
	 *     Comparison.Comparison_1_0 returns Unary
	 *     PlusOrMinus returns Unary
	 *     PlusOrMinus.Plus_1_0_0_0 returns Unary
	 *     PlusOrMinus.Minus_1_0_1_0 returns Unary
	 *     MulOrDiv returns Unary
	 *     MulOrDiv.MulOrDiv_1_0 returns Unary
	 *     Primary returns Unary
	 *
	 * Constraint:
	 *     (op=UnaryOp expression=Primary)
	 */
	protected void sequence_Primary(ISerializationContext context, Unary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.UNARY__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.UNARY__OP));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.UNARY__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.UNARY__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getOpUnaryOpParserRuleCall_2_1_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_2_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Range returns Range
	 *
	 * Constraint:
	 *     value=wildcard
	 */
	protected void sequence_Range(ISerializationContext context, Range semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.RANGE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.RANGE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRangeAccess().getValueWildcardParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelDeclaration returns RelDeclaration
	 *
	 * Constraint:
	 *     (name=ID exp=Relation)
	 */
	protected void sequence_RelDeclaration(ISerializationContext context, RelDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.REL_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.REL_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.REL_DECLARATION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.REL_DECLARATION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelDeclarationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRelDeclarationAccess().getExpRelationParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns SingleInstruction
	 *     Sample returns SingleInstruction
	 *
	 * Constraint:
	 *     name=OperationName
	 */
	protected void sequence_Sample(ISerializationContext context, SingleInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.SINGLE_INSTRUCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.SINGLE_INSTRUCTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSampleAccess().getNameOperationNameParserRuleCall_0_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns ValidConf
	 *     Sample returns ValidConf
	 *
	 * Constraint:
	 *     valuations=ListOfValuation
	 */
	protected void sequence_Sample(ISerializationContext context, ValidConf semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.VALID_CONF__VALUATIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.VALID_CONF__VALUATIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSampleAccess().getValuationsListOfValuationParserRuleCall_1_3_0(), semanticObject.getValuations());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Symbol returns Symbol
	 *     Value returns Symbol
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Symbol(ISerializationContext context, Symbol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.SYMBOL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.SYMBOL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSymbolAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Valuation returns Valuation
	 *
	 * Constraint:
	 *     (element=[ElmDeclaration|ID] value=Value)
	 */
	protected void sequence_Valuation(ISerializationContext context, Valuation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.VALUATION__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.VALUATION__ELEMENT));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.VALUATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.VALUATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValuationAccess().getElementElmDeclarationIDTerminalRuleCall_1_0_1(), semanticObject.eGet(HlvlPackage.Literals.VALUATION__ELEMENT, false));
		feeder.accept(grammarAccess.getValuationAccess().getValueValueParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns VarList
	 *     VarList returns VarList
	 *
	 * Constraint:
	 *     ((operator='implies' | operator='mutex') var1=[ElmDeclaration|ID] list=ListOfIDs)
	 */
	protected void sequence_VarList(ISerializationContext context, VarList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns VariableDecl
	 *     VariableDecl returns VariableDecl
	 *
	 * Constraint:
	 *     variants=OptionsDeclaration
	 */
	protected void sequence_VariableDecl(ISerializationContext context, VariableDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.VARIABLE_DECL__VARIANTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.VARIABLE_DECL__VARIANTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableDeclAccess().getVariantsOptionsDeclarationParserRuleCall_1_1_0(), semanticObject.getVariants());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Visibility
	 *     Visibility returns Visibility
	 *
	 * Constraint:
	 *     (condition=Relational list=ListOfRelRefs)
	 */
	protected void sequence_Visibility(ISerializationContext context, Visibility semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.VISIBILITY__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.VISIBILITY__CONDITION));
			if (transientValues.isValueTransient(semanticObject, HlvlPackage.Literals.VISIBILITY__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlvlPackage.Literals.VISIBILITY__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVisibilityAccess().getConditionRelationalParserRuleCall_2_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getVisibilityAccess().getListListOfRelRefsParserRuleCall_5_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
}
