package com.coffee.generator;

import com.coffee.hlvl.Model;
import com.coffee.hlvl.Relation;

/**
 * Interface to define the methods a code generator for the HLVL language
 * should implement,  This interface is implemented by the BoolGenerator
 * @author Angela Villota
 * @version HLVL V1.4
 * August 2018
 * updated on may 2019
 */

public interface IHLVLParser {
	
	/**
	 * Method to generate the HLCL representation of a variability model in the MiniZinc language
	 * This method produces the template of the 
	 * @param model is an ECORE syntax tree with the program
	 * this syntax tree should be traversed. 
	 * This method is implemented in AbstractGenerator and should be overwritten for very 
	 * particular cases.
	 */
	public  CharSequence parseModel(Model model);
	
	
	//def  CharSequence putAutogeneratedCons();
	
	// For the abstract generator
		/**
	 * This method traverses the collection of elements to produce a block of code containing the 
	 * declaration of the elements represented as variables in the MiniZinc language.
	 * @param model
	 */
	public  CharSequence   parseElements(Model model);
	
	 
	 /**
	 * This method parses a variability relation individually.
	 * @param rel is a variability relation
	 */
	public  CharSequence parseRelation(Relation rel);
	
	
	/**
	 * 
	 */
	public CharSequence getOperations(long time);

	// getters and setters
//	def  String getModelName();
//	def  Dialect getDialect();
//	def  void addParents(Decomposition exp);
//	def  Map <String, ElmDeclaration> getParents();
//	def void setFactory( TransformationRules factory)
//	def String getOperations(long time)
//	
	
	
	
}